1.  What are some pros and cons of using linked lists instead of arrays?

Pros: easier insertion process (in an array you have to copy and shift, in a linked list you can just insert with the forward reference), easier deletion process, can be stored using less memory because they aren't contiguous

Cons: you must always iterate to find the node you are looking for, no direct way to access because there is no index, can take a long time to search/iterate through

2.  Come up with a real world example of a linked list.

What do you want, a real implementation or some metaphorical comparison?

Real implementation: selecting songs from a library to burn to a cd - you wouldn't want to resize an reallocate an entire array for that, would make more sense for one to just point to the next (then if you edit it during selection insertions/deletions are also easier)

Metaphorical: like train cars, they are attached in a line - you must move through one to get to the next (no skipping over), and if you remove one, the cars behind and in front will reattach to bridge the gap.

Programming Questions
You may program the following questions in any language of your choice (JavaScript, pseudocode, etc.).

Before beginning to code, write out a plan explaining how to solve the question.

3.  The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code.

The head has to exist otherwise you don't have a linked list because you don't have a reference anywhere.  After we create the node, we should make it point to the head.  Then we move the head reference back to the new node.

LinkedList.prototype.push = function(element) {
 SET node = {
   value: element,
   next: null
 }

   SET node.next to head
   SET head to node

 }
}

4.  Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d


class LinkedList {

  constructor(value) {
    this.head = null;
    this.length = 0;
    this.addNode(value);
  }

  addNode(value) {
    const newNode = {value: value};
    newNode.next = this.head;
    this.head = newNode
    this.length++;
  }

}

function removeDuplicates(linkedList) {
  var refNode = linkedList.head;
  var testValues = [];
  testValues[0] = refNode.value;
  var index=1;
  while (refNode.next !== null ) {
    if (testValues.includes(refNode.next.value) && refNode.next.next !== null) {
      refNode.next = refNode.next.next;
      refNode = refNode.next;
    } else if (testValues.includes(refNode.next.value)) {
      refNode.next = null;
    } else {
      testValues[index] = refNode.next.value;
      index++;
      refNode  = refNode.next;
    }
  }
  linkedList.length = testValues.length;
  return linkedList;
}



5.  Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

class LinkedList {
  constructor(value) {
    this.head = null;
    this.length = 0;
    this.addNode(value);
  }

  addNode(value) {
    const newNode = {value: value};
    newNode.next = this.head;
    this.head = newNode
    this.length++;
  }
}

function reverseList(inputList) {
  refNode = inputList.head;
  reverseList = new LinkedList(refNode.value);
  while(refNode.next !== null) {
    reverseList.addNode(refNode.next.value);
    refNode = refNode.next;
  }
  return reverseList;
}
