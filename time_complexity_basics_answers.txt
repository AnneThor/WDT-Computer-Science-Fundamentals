1. What is time complexity and what is its relation to algorithms?

Time complexity is an estimation of how long it will take an algorithm to run.

2.  What is runtime?

Same as time complexity.

3.  How is the runtime of an algorithm calculated?

Runtime is calculated by examining the number of operations required based on an infinitely large data sets.  Runtime refers to the limits of the scenario - how it would perform with the largest possible data sets.

4.  Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

1.  O(1) - algorithms that perform 1 operation, example return a+b
2.  O(log n) - algorithms that halve the dataset with each operation (example binary search tree)
3.  O(n) - algorithms that perform an operation once per item in dataset (example, iterate through an array)
4.  O(n log n) - algorithms that halve the dataset for each of n times
5.  O(n^2) - quadratic growth, runtime proportionate to square of dataset (nested loops)
6.  O(2^n) - exponential growth - doubles with each addition to the dataset
7.  O(n!) - eventually will grow faster than O(2^n)

5.  Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

In a group of people everyone asks each other person a unique question, order n^2.

6.  Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN //this is O(1) so I will basically disregard it
     RETURN true 
   END IF
 END FOR //check condition on every single element O(n)
 RETURN false
END FUNCTION
Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

O(1) + O(n) so it's O(n) - in the worst case scenario you will iterate through the entire array

7.  
FUNCTION foo(array)
 FOR each number in the array //O(n)
   FOR each number in the array // O(n) for each n so therefore O(n^2) at this point
     print "Hello" O(1) so disregard
   END FOR
 END FOR
END FUNCTION

O(n^2)


8.  Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.


FUNCTION fibonacci(number)
 IF number < 1 THEN 
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1 //O(1)
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack //O(n-2)
   CALL fibonacci WITH number - 1 RETURNING oneBack //O(n-1))
   RETURN twoBack + oneBack
 END IF
END FUNCTION

As we approach infinity then we have F(n) = F(n-2) + F(n-1) + F(1), basically the function is called twice for every additional value of n (which in turn makes 2 calls recursively), so we have O(2^n).

9.  Out of the code snippets you just saw, which is the most time efficient?

The linear variant O(n) which was iterating through an array.