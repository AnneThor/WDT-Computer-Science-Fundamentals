Exercises
Please submit your answers to the following questions in a file called intro_to_clean_coding_answers.txt.

1.  In your own words, explain what clean code is and why it is important.

Clean code follows proper naming conventions, is written concisely and is well factored so that functions are broken into their simplest possible, reusable parts.  Clean code should be easy to follow with minimal comments.


2.  Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

This article does not even touch on how or why Toyota ended up with such systems.  I bet it is more common than anyone imagines when you are adding new technologies in large corporations that are integrating/updating/refactoring old code that has been around forever.  The economy of starting over from scratch to build a new, easier to control/monitor system probably just doesn't make sense.  

A lot of things rely on computers now, but one example that comes to mind is the "internet of things" where people are using remote systems to control their alarm devices, thermostats, etc.  If data is being misreported or improperly reacted to, lots of things could easily go wrong.

3.  Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)              // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

No it's not clean code, you don't need to comment every single line, naming conventions aren't followed, proper indentation isn't used, etc.  Here's a better idea:

convertTemperature = (temperature, scale) => {
    var convertedTemperature = null;
    if (scale === 'F') { 
        convertedTemperature = (temperature-32)*5/9;
        console.log(convertedTemperature);
    } else if (scale === "C") {
        convertedTemperature = temperature*1.8000+32.00;
        console.log(convertedTemperature);
    } else {
        console.log("Invalid temperature scale input");
    }
}

4.  Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

This is a better example, but it's still not using the best naming conventions and it's making some variables that aren't returned so we can condense it a bit (since only purpose of this function is to display a value):

calculatePercent = (portion, total) => {
  total !== 0 ? console.log(portion/total*100) : console.log("Sorry, cannot divide by zero");
}


5.  Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)
   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

We should pull out some of the repetitive portions.  I am assuming the tax rate is a non variable global variable.

FUNCTION getBalanceDue(subTotal, discountRate) 
    RETURN subTotal*discountRate + subTotal*tax
END FUNCTION

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
    SET balanceDue = getBalanceDue(subTotal, discountRate)
    IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - balanceDue
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + balanceDue
   END IF
END FUNCTION

But I still don't like to have if and else if with 2 restrictive conditions like that because there is no way to handle an input where payment type isn't CASH or CREDIT CARD.


b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

Too nested, and we can flip the conditionals:

FUNCTION checkoutBook(book, guest)
    IF NOT(guest.accountActive) OR IF(guest.hasOverdueBooks) OR IF(guest.outstandingFees >0)
	PRINT "Unable to check out book"
    ELSE
    APPEND book to guest.books
    SET book.status to "Checkout Out"
    PRINT "Your books have been issued."
    END IF
END FUNCTION

I don't know what language I'm writing in right now, best would be to have the function return if it enters the first if conditional after it prints unable to check out book.  And then it will only enter the actual checkout process if all conditions are satisfied.

c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

In this case it would be better to have two separate Classes for BankAccount and Customer because the customer info doesn't relate to the bank balance:

Class BankAccount
State holds balance

Function to display balance
Function to increment balance with deposits
Function to reduce balance on withdrawals

Class Customer
State hold customer contact details, customer id, other customer related info

Function to check if customer has a credit card
Function to check status of existing checking account



Programming Questions
You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

testForSquareRoot = (inputIntegers) => {
  const reducer = (accumulator, currentValue) => accumulator + currentValue;
  const sumOfArray = inputIntegers.reduce(reducer);
  rootOfSum = Math.sqrt(sumOfArray);
  if (rootOfSum === Math.floor(rootOfSum)) {
    return rootOfSum;
  }
  return sumOfArray;
}


7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

isArrayHoldingDuplicates = (sampleIntegers) => {
  var uniqueValues = [...new Set(sampleIntegers)];
  return uniqueValues.length !== sampleIntegers.length;
}

Extra Credit
8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

function convertToOrderedArray(inputString) {
  return inputString.toLowerCase().split("").sort();
}

isAnagram = (stringOne, stringTwo) => {
  if (stringOne === stringTwo) {return true};
  if (stringOne.length !== stringTwo.length) {return false};
  arrayOne = convertToOrderedArray(stringOne);
  arrayTwo = convertToOrderedArray(stringTwo);
  for (i=0; i<arrayOne.length; i++) {
    if (arrayOne[i] !== arrayTwo[i]) {return false};
  }
  return true;
}

I added some fast tests at the beginning to avoid entering a loop if we know immediately that the strings are the same or if we know there are an unequal number of characters (which it can't be an anagram in that case).  It does handle uppercase letters, but if you wanted to remove that you could just take it out of the convertToOrderedArray function.

